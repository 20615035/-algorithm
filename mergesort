#include <iostream>
#include <chrono>

using namespace std;

void Merge(int list[], int left, int mid, int right, int sorted[]) {
    int i = left, j = mid + 1, k = left; 

    while (i <= mid && j <= right) { 
        if (list[i] <= list[j])
            sorted[k++] = list[i++];
        else
            sorted[k++] = list[j++];
    }

    if (i > mid) {
        while (j <= right)
            sorted[k++] = list[j++];
    }
    else {
        while (i <= mid)
            sorted[k++] = list[i++];
    }

    for (int l = left; l <= right; l++) {
        list[l] = sorted[l];
    }
}

void MergeSort(int list[], int left, int right, int sorted[]) {
    if (left < right) {
        int mid = (left + right) / 2;
        MergeSort(list, left, mid, sorted);
        MergeSort(list, mid + 1, right, sorted);
        Merge(list, left, mid, right, sorted);
    }
}

int main() {
    int list[] = { 40, 23, 55, 4, 6, 77, 19 };
    int size = sizeof(list) / sizeof(list[0]);
    int* sorted = new int[size]; 

    auto start = chrono::high_resolution_clock::now();

    MergeSort(list, 0, size - 1, sorted);

    auto end = chrono::high_resolution_clock::now();

    chrono::duration<double, milli> duration = end - start;

    cout << "정렬된 배열: ";
    for (int i = 0; i < size; i++) {
        cout << list[i] << " ";
    }
    cout << endl;

    cout << "실행시간: " << duration.count() << " ms" << endl;

    delete[] sorted;

    return 0;
}
